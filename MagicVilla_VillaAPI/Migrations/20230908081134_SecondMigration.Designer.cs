// <auto-generated />
using System;
using MagicVilla_VillaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MagicVilla_VillaAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230908081134_SecondMigration")]
    partial class SecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MagicVilla_VillaAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MagicVilla_VillaAPI.Models.Villa", b =>
                {
                    b.Property<int>("VillaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VillaId"), 1L, 1);

                    b.Property<string>("Amenity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Occupancy")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<int>("SquareFit")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VillaId");

                    b.ToTable("Villas");

                    b.HasData(
                        new
                        {
                            VillaId = 1,
                            Amenity = "Good road",
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6281),
                            Details = "Serenity at its best",
                            ImageUrl = "https://images.pexels.com/photos/18054267/pexels-photo-18054267.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load",
                            Name = "Confidence Lounge",
                            Occupancy = 5,
                            Rate = 200.0,
                            SquareFit = 500,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VillaId = 2,
                            Amenity = "Good road",
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6326),
                            Details = "Serenity at its best",
                            ImageUrl = "https://images.pexels.com/photos/18054267/pexels-photo-18054267.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load",
                            Name = "Confidence Lounge",
                            Occupancy = 50,
                            Rate = 2000.0,
                            SquareFit = 5000,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VillaId = 3,
                            Amenity = "Good water",
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6330),
                            Details = "Serenity at its best",
                            ImageUrl = "https://images.pexels.com/photos/18054267/pexels-photo-18054267.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load",
                            Name = "Confidence Lounge",
                            Occupancy = 51,
                            Rate = 2001.0,
                            SquareFit = 5001,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VillaId = 4,
                            Amenity = "Good electricity",
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6333),
                            Details = "Serenity at its best",
                            ImageUrl = "https://images.pexels.com/photos/18054267/pexels-photo-18054267.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load",
                            Name = "Confidence Lounge",
                            Occupancy = 52,
                            Rate = 2002.0,
                            SquareFit = 5002,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VillaId = 5,
                            Amenity = "Good road",
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6335),
                            Details = "Serenity at its best",
                            ImageUrl = "https://images.pexels.com/photos/18054267/pexels-photo-18054267.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load",
                            Name = "Confidence Lounge",
                            Occupancy = 5,
                            Rate = 200.0,
                            SquareFit = 500,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VillaId = 6,
                            Amenity = "Good road",
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6338),
                            Details = "Serenity at its best",
                            ImageUrl = "https://images.pexels.com/photos/18054267/pexels-photo-18054267.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load",
                            Name = "Confidence Lounge",
                            Occupancy = 5,
                            Rate = 200.0,
                            SquareFit = 500,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VillaId = 7,
                            Amenity = "Good road",
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6341),
                            Details = "Serenity at its best",
                            ImageUrl = "https://images.pexels.com/photos/18054267/pexels-photo-18054267.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load",
                            Name = "Confidence Lounge",
                            Occupancy = 5,
                            Rate = 200.0,
                            SquareFit = 500,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VillaId = 8,
                            Amenity = "Good road",
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6344),
                            Details = "Serenity at its best",
                            ImageUrl = "https://images.pexels.com/photos/18054267/pexels-photo-18054267.jpeg?auto=compress&cs=tinysrgb&w=600&lazy=load",
                            Name = "Confidence Lounge",
                            Occupancy = 5,
                            Rate = 200.0,
                            SquareFit = 500,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MagicVilla_VillaAPI.Models.VillaNumber", b =>
                {
                    b.Property<int>("VillaNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecialDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.HasKey("VillaNo");

                    b.HasIndex("VillaId")
                        .IsUnique();

                    b.ToTable("VillaNumber");

                    b.HasData(
                        new
                        {
                            VillaNo = 10,
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6587),
                            SpecialDetails = "no special details",
                            UpdatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6590),
                            VillaId = 1
                        },
                        new
                        {
                            VillaNo = 20,
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6593),
                            SpecialDetails = "no special details",
                            UpdatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6595),
                            VillaId = 2
                        },
                        new
                        {
                            VillaNo = 30,
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6598),
                            SpecialDetails = "no special details",
                            UpdatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6600),
                            VillaId = 3
                        },
                        new
                        {
                            VillaNo = 40,
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6602),
                            SpecialDetails = "no special details",
                            UpdatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6604),
                            VillaId = 4
                        },
                        new
                        {
                            VillaNo = 50,
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6607),
                            SpecialDetails = "no special details",
                            UpdatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6608),
                            VillaId = 5
                        },
                        new
                        {
                            VillaNo = 60,
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6611),
                            SpecialDetails = "no special details",
                            UpdatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6613),
                            VillaId = 6
                        },
                        new
                        {
                            VillaNo = 70,
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6615),
                            SpecialDetails = "no special details",
                            UpdatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6617),
                            VillaId = 7
                        },
                        new
                        {
                            VillaNo = 80,
                            CreatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6619),
                            SpecialDetails = "no special details",
                            UpdatedDate = new DateTime(2023, 9, 8, 9, 11, 34, 150, DateTimeKind.Local).AddTicks(6621),
                            VillaId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MagicVilla_VillaAPI.Models.VillaNumber", b =>
                {
                    b.HasOne("MagicVilla_VillaAPI.Models.Villa", "Villa")
                        .WithOne("VillaNumber")
                        .HasForeignKey("MagicVilla_VillaAPI.Models.VillaNumber", "VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MagicVilla_VillaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MagicVilla_VillaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MagicVilla_VillaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MagicVilla_VillaAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MagicVilla_VillaAPI.Models.Villa", b =>
                {
                    b.Navigation("VillaNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
